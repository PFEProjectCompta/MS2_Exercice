scalar Date
type Query {
#QUERY FOR "Exercice"
    exerciceList:[Exercice]
    fullExerciceList:[Exercice]
    exerciceById(id:String):Exercice
    fullExerciceListBySocieteId(id:String):[Exercice]
#QUERY FOR "CodeJournal"
    fullCodeJournalListByExerciceId(id:String):[CodeJournaux]
    codeJournalById(id:String):CodeJournaux
#QUERY FOR "SaisieJournaux"
    saisiJournauxList:[SaisieJournaux]
    saisieJournalById(id:String):SaisieJournaux
    saisieJournauxByCodeJournal(id:String):[SaisieJournaux]
    saisieJournauxByExercice(idExercice:String):[SaisieJournaux]
#QUERY FOR "Journale"
    journaleList:[Journale]
    journaleById(id:String):Journale
    journaleBySaisieJournal(id:String):[Journale]
}

type Mutation{
#MUTATION FOR "Exercice"
    ajouterExercice(exercice: ExerciceDTO):Exercice
    modifierExercice(exercice:ExerciceDTO, id : String):Exercice
#MUTATION FOR "CodeJournal"
    ajouterCodeJournal(codeJournauxDTO:CodeJournauxDTO):CodeJournaux
    modifierCodeJournal(codeJournauxDTO:CodeJournauxDTO,id : String):CodeJournaux
    supprimerCodeJournal(id : String):CodeJournaux
#MUTATION FOR "SaisieJournaux"
    ajouterSaisieJournaux(saisiJournal:SaisieJournalDTO):SaisieJournaux
    updateSaisieJournaux(saisiJournal:SaisieJournalDTO,id:String):SaisieJournaux
    deleteSaisieJournaux(id:String):SaisieJournaux
    ajouterAllSaisieJournaux(idCodeJournal:String):String
#MUTATION FOR "Journale"
    ajouterJournale(journalDTO:JournaleDTO):Journale
    updateJournale(journalDTO:JournaleDTO,id :String):Journale
    deleteJournale(id :String):Journale
}

input ExerciceDTO{
    date_debut :String ,
    date_fin :String ,
    societeId :String
}
input SaisieJournalDTO{
    position: String ,
    periode: String ,
    code: String ,
    intitule_journale: String ,
    code_Journal_id: String
}
input JournaleDTO{
    jour :Int
    numFacture :String ,
    ref :String ,
    numCompteId :String ,
    numCompteTiereId: String ,
    libelle :String ,
    credit: Float ,
    debit: Float ,
    saisieJournauxId :String
}
type Exercice{
    id :String ,
    date_debut :String ,
    date_fin :String ,
    societeId :String ,
    societe :Societe,
    codeJournaux:[CodeJournaux]
}
type CodeJournaux{
    id: String ,
    code: String ,
    intitule_journale: String ,
    type_journal: String ,
    exercice: Exercice ,
    saisieJournaux :[SaisieJournaux]
}
input CodeJournauxDTO{
    code: String ,
    intitule_journale: String ,
    type_journal: String ,
    exerciceId: String ,
}
type SaisieJournaux{
    id :String ,
    position :String,
    periode :String ,
    code: String ,
    intitule_journale :String ,
    classement: Int ,
    code_Journal:CodeJournaux ,
    journaux:[Journale]
}

type Journale{
    id: String ,
    jour :Int ,
    numFacture :String ,
    ref: String ,
    numCompteId :String ,
    numCompteTiereId: String ,
    libelle :String ,
    credit:Float ,
    debit: Float ,
    numCompte:PlanComptableElement,
    numCompteTiere:PlanComptableElement,
    saisieJournaux :SaisieJournaux
}

type BureauAdmine{
    id : String,
    nom: String ,
    prenom: String,
    email : String
}
type Bureau{
    id :String ,
    nom :String ,
    adresse :String ,
    ville :String ,
    paye :String ,
    numero_tele: String ,
    email :String,
    admine:BureauAdmine,
    compteUtilisateurs: [CompteUtilisateur]
}
type Societe{
    id :String ,
    raison_social: String ,
    activite :String ,
    adresse: String,
    compteUtilisateur: CompteUtilisateur
}

type CompteUtilisateur{
    id: String,
    nom :String ,
    prenom: String ,
    email :String ,
    adresse: String ,
    ville :String ,
    pays :String ,
    telephone: String ,
    date_naissance : Float ,
    actif : Boolean,
    bureau: Bureau,
    societes: [Societe]
}


type PlanComptableElement{
    id :String ,
    numeroCompte: String ,
    intitule: String ,
    reporter: Boolean,
    compteGeneral: CompteGeneral
}
type CompteGeneral{
    id :String,
    natureCompte :String ,
    debutFaurchette: String ,
    finFaurchette :String
}